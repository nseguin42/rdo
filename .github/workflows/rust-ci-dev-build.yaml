name: Rust CI (dev, build)

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  startup:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["push"]'
          paths_ignore: '[ "README.md", "LICENSE", ".gitignore", ".github/**", ".rustfmt.toml" ]'
          paths_filter: |
            build:
              paths:
                - Cargo.toml
                - Cargo.lock
                - src/**
                - tests/**
  rust_ci_dev:
    needs: startup
    if: needs.check.outputs.should_skip != 'true' || !fromJSON(needs.check.outputs.paths_result).build.should_skip
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
      - name: Install linting tools
        run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit clippy-sarif sarif-fmt
      - name: cargo check --verbose
        run: cargo check --verbose
      - name: cargo fmt --verbose -- --check
        run: cargo fmt --verbose -- --check
      - name: cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        run: cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      - name: cargo audit
        run: cargo audit
      - name: cargo doc --verbose
        run: cargo doc --verbose
      - name: Upload clippy analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2.2.5
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
      - name: cargo build --verbose
        run: cargo build --verbose
      - name: cargo test --verbose
        run: cargo test --verbose
